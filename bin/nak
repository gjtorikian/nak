#!/usr/bin/env node

var options = require("../lib/options").parseArgs(),
    fs = require('fs'),
    path = require('path'),
    walkdir = require('../lib/walkdir').walkdir,
    ignorer = require('../lib/ignorer');



// arguments
var fpath = path.resolve(options.args.pop()),
    replacement = null,
    query = null,
    fileColor = "", textColor = "", matchColor = "";

if (options.args.length == 1)
  query = options.args.pop();
else if (options.args.length == 2) {
  replacement = options.args.pop();
  query = options.args.pop();
}

if (options.color) {
  fileColor = '\n\033[36m%s\033[0m';
  textColor = '\033[37;43m\1\033[0;90m';
  matchColor = '\033[90m%s';
}

options.filesInclude = options.fileSearch ? ignorer.makeWildcardRegExp(options.fileSearch, true) : { test: function(){ return true }};

setExclusions(fpath);

// set the query up, and present a final summary; also, pump out results as they come.
// "streaming" output like this is slower (because console.log blocks)
// but serves a purpose when finding text
if (query) {
  makeQuery(query, replacement);
  var matches = 0, filecount = 0;

  walkdir(fpath, options, function(file, lines, _matches) {  
    if (!options.color) {
      console.log(file);
      console.log(lines);
    }
    else {
      console.log(fileColor, file + ":");
      lines = lines.replace(options.query, textColor);
      console.log(matchColor, lines);
    }

    matches += _matches;
    filecount++;
  }, function() {
    if (!options.ackmate)
      console.log("Found " + matches + (matches == 1 ? " match" : " matches")  + " in " + filecount + (filecount == 1 ? " file " : " files ")); 
  });
}
// if we're listing, callback at the very end
else if (options.list) {
  walkdir(fpath, options, function(lines) {
    console.log(lines);
  });
}

function setExclusions(fpath) {
  var exclusions = dirExclusions = [];

  // if these ignore files don't exist, don't worry about them
  try {
    if (options.pathToNakignore) {
      exclusions = fs.readFileSync(options.pathToNakignore, "utf-8");
    }
  }
  catch (e) { };

  try {
    dirExclusions = fs.readFileSync(fpath + path.sep + ".nakignore", "utf8");
  } catch (e) { };

  var combinedExclusions = exclusions + "\n" + dirExclusions + "\n" + (options.ignore !== undefined ? options.ignore : "");

  if (combinedExclusions.length) {
    options.exclusions = combinedExclusions.split(/\r?\n/).filter(function (e) { return !!e && /^[^#]/.test(e)});
    options.exclusionsLength = options.exclusions.length;
  }
};

function makeQuery(query, replacement) {
  var flags = "g";
  if (options.literal) 
    query = ignorer.escapeRegExp(query);
  if (options.ignoreCase)
    flags += "i";

  if (options.wordRegexp)
    query = "\\b(?:" + query + ")\\b";

  options.query = new RegExp(query, flags);

  if (replacement) {
    options.replacement = replacement;
  }

  if (options.ackmate) {
    options.cleanQuery = new RegExp(query, flags.substr(1));
  }
}